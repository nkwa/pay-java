/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.nkwa.pay.pay_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.nkwa.pay.pay_sdk.utils.Utils;

public class PaymentRequest {

    @JsonProperty("amount")
    private long amount;

    @JsonProperty("phoneNumber")
    private String phoneNumber;

    @JsonCreator
    public PaymentRequest(
            @JsonProperty("amount") long amount,
            @JsonProperty("phoneNumber") String phoneNumber) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.amount = amount;
        this.phoneNumber = phoneNumber;
    }

    @JsonIgnore
    public long amount() {
        return amount;
    }

    @JsonIgnore
    public String phoneNumber() {
        return phoneNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PaymentRequest withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public PaymentRequest withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentRequest other = (PaymentRequest) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            phoneNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentRequest.class,
                "amount", amount,
                "phoneNumber", phoneNumber);
    }
    
    public final static class Builder {
 
        private Long amount;
 
        private String phoneNumber;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        public PaymentRequest build() {
            return new PaymentRequest(
                amount,
                phoneNumber);
        }
    }
}
