/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.nkwa.pay.pay_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.nkwa.pay.pay_sdk.utils.Utils;

public class Availability {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operator")
    private Optional<? extends Operator> operator;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operation")
    private Optional<? extends Operation> operation;

    @JsonCreator
    public Availability(
            @JsonProperty("operator") Optional<? extends Operator> operator,
            @JsonProperty("operation") Optional<? extends Operation> operation) {
        Utils.checkNotNull(operator, "operator");
        Utils.checkNotNull(operation, "operation");
        this.operator = operator;
        this.operation = operation;
    }
    
    public Availability() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Operator> operator() {
        return (Optional<Operator>) operator;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Operation> operation() {
        return (Optional<Operation>) operation;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Availability withOperator(Operator operator) {
        Utils.checkNotNull(operator, "operator");
        this.operator = Optional.ofNullable(operator);
        return this;
    }

    public Availability withOperator(Optional<? extends Operator> operator) {
        Utils.checkNotNull(operator, "operator");
        this.operator = operator;
        return this;
    }

    public Availability withOperation(Operation operation) {
        Utils.checkNotNull(operation, "operation");
        this.operation = Optional.ofNullable(operation);
        return this;
    }

    public Availability withOperation(Optional<? extends Operation> operation) {
        Utils.checkNotNull(operation, "operation");
        this.operation = operation;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Availability other = (Availability) o;
        return 
            Objects.deepEquals(this.operator, other.operator) &&
            Objects.deepEquals(this.operation, other.operation);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            operator,
            operation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Availability.class,
                "operator", operator,
                "operation", operation);
    }
    
    public final static class Builder {
 
        private Optional<? extends Operator> operator = Optional.empty();
 
        private Optional<? extends Operation> operation = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder operator(Operator operator) {
            Utils.checkNotNull(operator, "operator");
            this.operator = Optional.ofNullable(operator);
            return this;
        }

        public Builder operator(Optional<? extends Operator> operator) {
            Utils.checkNotNull(operator, "operator");
            this.operator = operator;
            return this;
        }

        public Builder operation(Operation operation) {
            Utils.checkNotNull(operation, "operation");
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        public Builder operation(Optional<? extends Operation> operation) {
            Utils.checkNotNull(operation, "operation");
            this.operation = operation;
            return this;
        }
        
        public Availability build() {
            return new Availability(
                operator,
                operation);
        }
    }
}
