/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.nkwa.pay.pay_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.nkwa.pay.pay_sdk.utils.Utils;

public class Payment {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<Long> amount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fee")
    private Optional<Long> fee;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantId")
    private Optional<Long> merchantId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentType")
    private Optional<? extends PaymentType> paymentType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    private Optional<String> phoneNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends PaymentStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telecomOperator")
    private Optional<? extends TelecomOperator> telecomOperator;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public Payment(
            @JsonProperty("amount") Optional<Long> amount,
            @JsonProperty("createdAt") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("fee") Optional<Long> fee,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("merchantId") Optional<Long> merchantId,
            @JsonProperty("paymentType") Optional<? extends PaymentType> paymentType,
            @JsonProperty("phoneNumber") Optional<String> phoneNumber,
            @JsonProperty("status") Optional<? extends PaymentStatus> status,
            @JsonProperty("telecomOperator") Optional<? extends TelecomOperator> telecomOperator,
            @JsonProperty("updatedAt") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(fee, "fee");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantId, "merchantId");
        Utils.checkNotNull(paymentType, "paymentType");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(telecomOperator, "telecomOperator");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.amount = amount;
        this.createdAt = createdAt;
        this.currency = currency;
        this.description = description;
        this.fee = fee;
        this.id = id;
        this.merchantId = merchantId;
        this.paymentType = paymentType;
        this.phoneNumber = phoneNumber;
        this.status = status;
        this.telecomOperator = telecomOperator;
        this.updatedAt = updatedAt;
    }
    
    public Payment() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> amount() {
        return amount;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<Long> fee() {
        return fee;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Long> merchantId() {
        return merchantId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentType> paymentType() {
        return (Optional<PaymentType>) paymentType;
    }

    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentStatus> status() {
        return (Optional<PaymentStatus>) status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TelecomOperator> telecomOperator() {
        return (Optional<TelecomOperator>) telecomOperator;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Payment withAmount(long amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    public Payment withAmount(Optional<Long> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public Payment withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public Payment withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public Payment withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    public Payment withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public Payment withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public Payment withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public Payment withFee(long fee) {
        Utils.checkNotNull(fee, "fee");
        this.fee = Optional.ofNullable(fee);
        return this;
    }

    public Payment withFee(Optional<Long> fee) {
        Utils.checkNotNull(fee, "fee");
        this.fee = fee;
        return this;
    }

    public Payment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Payment withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Payment withMerchantId(long merchantId) {
        Utils.checkNotNull(merchantId, "merchantId");
        this.merchantId = Optional.ofNullable(merchantId);
        return this;
    }

    public Payment withMerchantId(Optional<Long> merchantId) {
        Utils.checkNotNull(merchantId, "merchantId");
        this.merchantId = merchantId;
        return this;
    }

    public Payment withPaymentType(PaymentType paymentType) {
        Utils.checkNotNull(paymentType, "paymentType");
        this.paymentType = Optional.ofNullable(paymentType);
        return this;
    }

    public Payment withPaymentType(Optional<? extends PaymentType> paymentType) {
        Utils.checkNotNull(paymentType, "paymentType");
        this.paymentType = paymentType;
        return this;
    }

    public Payment withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    public Payment withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    public Payment withStatus(PaymentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public Payment withStatus(Optional<? extends PaymentStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public Payment withTelecomOperator(TelecomOperator telecomOperator) {
        Utils.checkNotNull(telecomOperator, "telecomOperator");
        this.telecomOperator = Optional.ofNullable(telecomOperator);
        return this;
    }

    public Payment withTelecomOperator(Optional<? extends TelecomOperator> telecomOperator) {
        Utils.checkNotNull(telecomOperator, "telecomOperator");
        this.telecomOperator = telecomOperator;
        return this;
    }

    public Payment withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public Payment withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Payment other = (Payment) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.fee, other.fee) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.merchantId, other.merchantId) &&
            Objects.deepEquals(this.paymentType, other.paymentType) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.telecomOperator, other.telecomOperator) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            createdAt,
            currency,
            description,
            fee,
            id,
            merchantId,
            paymentType,
            phoneNumber,
            status,
            telecomOperator,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Payment.class,
                "amount", amount,
                "createdAt", createdAt,
                "currency", currency,
                "description", description,
                "fee", fee,
                "id", id,
                "merchantId", merchantId,
                "paymentType", paymentType,
                "phoneNumber", phoneNumber,
                "status", status,
                "telecomOperator", telecomOperator,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<Long> amount = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<Long> fee = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Long> merchantId = Optional.empty();
 
        private Optional<? extends PaymentType> paymentType = Optional.empty();
 
        private Optional<String> phoneNumber = Optional.empty();
 
        private Optional<? extends PaymentStatus> status = Optional.empty();
 
        private Optional<? extends TelecomOperator> telecomOperator = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(long amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<Long> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder fee(long fee) {
            Utils.checkNotNull(fee, "fee");
            this.fee = Optional.ofNullable(fee);
            return this;
        }

        public Builder fee(Optional<Long> fee) {
            Utils.checkNotNull(fee, "fee");
            this.fee = fee;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder merchantId(long merchantId) {
            Utils.checkNotNull(merchantId, "merchantId");
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        public Builder merchantId(Optional<Long> merchantId) {
            Utils.checkNotNull(merchantId, "merchantId");
            this.merchantId = merchantId;
            return this;
        }

        public Builder paymentType(PaymentType paymentType) {
            Utils.checkNotNull(paymentType, "paymentType");
            this.paymentType = Optional.ofNullable(paymentType);
            return this;
        }

        public Builder paymentType(Optional<? extends PaymentType> paymentType) {
            Utils.checkNotNull(paymentType, "paymentType");
            this.paymentType = paymentType;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder status(PaymentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends PaymentStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder telecomOperator(TelecomOperator telecomOperator) {
            Utils.checkNotNull(telecomOperator, "telecomOperator");
            this.telecomOperator = Optional.ofNullable(telecomOperator);
            return this;
        }

        public Builder telecomOperator(Optional<? extends TelecomOperator> telecomOperator) {
            Utils.checkNotNull(telecomOperator, "telecomOperator");
            this.telecomOperator = telecomOperator;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public Payment build() {
            return new Payment(
                amount,
                createdAt,
                currency,
                description,
                fee,
                id,
                merchantId,
                paymentType,
                phoneNumber,
                status,
                telecomOperator,
                updatedAt);
        }
    }
}
